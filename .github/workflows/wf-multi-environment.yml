name: Workflow Multi Environment

on:
  workflow_dispatch:
    inputs:
      db-projectname:
        description: Database [dbProject1, dbProject2]
        required: true

# Definir una matriz de variables para diferentes entornos
env:
  DEV_ENV: dev
  STAGING_ENV: staging
  PROD_ENV: prod

jobs:
  my-job:
    runs-on: ubuntu-latest
    steps:
      - name: json environments
      - run: |
            echo ${{ toJson(environment) }}
            
      - name: My Step
        run: |
          if [ "${{ env.ENVIRONMENT }}" = "dev" ]; then
            echo "Dev environment"
            # Add steps for dev environment
          elif [ "${{ env.ENVIRONMENT }}" = "staging" ]; then
            echo "Staging environment"
            # Add steps for staging environment
          elif [ "${{ env.ENVIRONMENT }}" = "prod" ]; then
            echo "Production environment"
            # Add steps for production environment
          else
            echo "Unknown environment"
          fi
        env:
          # Establecer la variable de entorno para el entorno actual
          ENVIRONMENT: ${{ env.${{ matrix.environment }} }}
        # Definir la matriz de variables para diferentes entornos
        strategy:
          matrix:
            environment: [DEV_ENV, STAGING_ENV, PROD_ENV]

# concurrency:
#   group: ${{ github.ref }}
#   cancel-in-progress: true

# jobs:
#   matrix:
#     name: Generate matrix
#     runs-on: ubuntu-latest
#     outputs:
#       matrix-json: ${{ steps.set-matrix.outputs.matrix }}
#     steps:
#       - uses: actions/checkout@v3
#       - id: set-matrix
#         shell: pwsh
#         #use a small powershell script to generaet the matrix
#         # run: "& .github/workflows/create-matrix.ps1 -element='db' -array=${{ inputs.db-projectname }}"
#         #echo '::set-output name=matrix::[{"db":"db1"}]'
#         run: |
#             $output=.github/workflows/create-matrix.ps1 -array ${{ inputs.db-projectname }}
#             #Remove additional [] at begining and end
#             if ($output.Substring(0,2) -eq "[[") 
#             {
#               $output = $output.Substring( 1, $output.Length -1)
#             }
            
#             echo "matrix=$output" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          
#           # The `set-output` command is deprecated and will be disabled soon. Please upgrade to using Environment Files. For more information see: https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
#           # Write-Host "::set-output name=matrix::$output"

#       - name: see json
#         shell: pwsh
#         #use a small powershell script to generaet the matrix
#         # run: "& .github/workflows/create-matrix.ps1 -element='db' -array=${{ inputs.db-projectname }}"
#         #echo '::set-output name=matrix::[{"db":"db1"}]'
#         run: |
#              Write-Host "output=${{steps.set-matrix.outputs.matrix}}"

#   build:
#     needs: [matrix]

#     strategy:
#       fail-fast: false
#       matrix: 
#         include: ${{ fromJson(needs.matrix.outputs.matrix-json) }}
    
#     name: "${{ matrix.db }}"
#     runs-on: ubuntu-latest 

#     steps:
#       - uses: actions/checkout@v3
#       # - name: Show matrix ${{ matrix.db }}
#       #   shell: pwsh
#       #   run: |
#       #       echo "DBName = ${{ matrix.db }}"
#       - name: ${{ matrix.db }}
#         shell: pwsh
#         run: |
#             Write-Host "${{ matrix.db }}"



#   #     # - name: Database Build ${{ matrix.cfg.db }}
#   #     #   uses: ./.github/actions/database-build
#   #     #   with:
#   #     #     db-projectname: ${{ matrix.cfg.db }}
#   #     #     upload-dacpac: true
